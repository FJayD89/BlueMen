from man import Manfrom perfect import *from point import Pointfrom board import Boardboard_size: tuple[int,int] = (10,10)men: list[Man] = [	Man.from_tuples([(0,0), (1,1), (1,0) , (3,-2)]),	Man.from_tuples([(0,0), (0,1), (0,2)] )]board = Board(10,10,[(man, Point(0,0)) for man in men])def main():    # Example pieces, each represented as a set of points (x, y)    diam = from_grid([        [1,0,0,0,0,0,1,1,0],        [1,1,1,0,0,0,1,0,0],        [0,0,1,0,0,0,1,0,0],        [0,0,1,1,1,1,1,0,0],        [0,1,1,1,1,1,0,0,0],        [0,0,1,1,1,1,1,1,0],        [0,0,1,0,0,0,0,1,0],        [0,0,1,0,0,0,0,1,1],        [0,0,1,1,0,0,0,0,0]    ])  # L-shaped piece    tria = from_grid([        [1,0,0,0,1,0,0,0],        [1,1,1,1,1,1,1,1],        [0,0,0,1,1,1,0,1],        [0,0,0,1,1,1,0,1],        [0,1,1,1,1,1,0,1],        [0,1,0,0,0,1,0,0],        [1,1,0,1,1,1,0,0],        [0,0,0,1,0,0,0,0]    ])  # Square-shaped piece    star = from_grid([        [0,0,0,0,0,0,0,1,0],        [0,0,0,0,0,0,0,1,0],        [1,0,0,0,1,0,0,1,0],        [1,1,1,1,1,1,1,1,0],        [0,0,0,1,1,1,0,0,0],        [0,0,0,1,1,1,0,0,0],        [0,0,0,1,1,1,1,1,0],        [0,0,0,1,0,0,0,1,0],        [0,1,1,1,0,0,0,1,1],        [0,1,0,0,0,0,0,0,0]    ])    hrt = from_grid([        [0,0,0,1,0,0,0,0,1],        [1,1,1,1,1,1,1,1,1],        [1,0,1,1,1,0,0,0,0],        [1,0,1,1,1,0,0,0,0],        [1,0,1,1,1,1,1,1,0],        [0,0,1,0,0,0,0,1,0],        [0,0,1,1,1,0,0,0,0],        [0,0,0,0,1,0,0,0,0]    ])    cros = from_grid([        [0,0,0,0,1,0,0,1],        [0,0,0,1,1,1,0,1],        [0,1,1,1,1,1,1,1],        [0,1,0,1,1,1,0,0],        [1,1,0,1,1,1,0,0],        [0,0,0,1,1,1,1,0],        [0,0,0,1,0,0,1,0],        [0,0,0,1,0,0,1,1],        [0,0,1,1,0,0,0,0]    ])    print(to_grid(hrt))    men = [star, diam, cros, hrt, tria]    # combs = choose_n(map(men, 4)    # Initialize an empty board of size 5x5    board = [[0 for _ in range(15)] for _ in range(15)]    # print(choose_n([1, 2, 3, 4], 3))    if solve_puzzle(board, list(map(generate_transformations, [star, hrt, diam, cros]))):        print("Puzzle solved!")        print_board(board)    else:        print("No solution found.")if __name__ == "__main__":    main()